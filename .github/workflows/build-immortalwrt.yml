name: Build Immortalwrt

on:
  # 调度事件（repository_dispatch）触发
  repository_dispatch:
  # 手动触发（workflow_dispatch）
  workflow_dispatch:
    inputs:
      defconfig_config:
        description: "Select the .config branch in defconfig"
        required: true
        default: "mt7981-ax3000"
        type: choice
        options:
          - mt7981-ax3000
          - mt7986-ax6000
          - mt7986-ax6000-256m
      builder_name:
        description: "Set OpenWrt builder signature."
        required: false
        default: "yourname"
        type: string

env:
  REPO_URL: https://github.com/grinch27/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  TZ: America/New_York
  # Path 为绝对路径 DIR 为文件夹名称
  PATH_BUILD: /builder
  PATH_REPO: /builder/openwrt
  PATH_OUTPUT: /builder/openwrt/output
  # Files 文件路径 默认相对于仓库目录路径
  FEEDS_CONF: ./feeds.conf.default
  FILES: ./files
  CONFIG_FILE: ./defconfig/${{ inputs.defconfig_config }}.config
  DIY_P1_SH: ./config/immortalwrt-master/diy-part1.sh
  DIY_P2_SH: ./config/immortalwrt-master/diy-part2.sh

jobs:
  build:
    name: Build Immortalwrt
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          # 如果环境变量 AGENT_TOOLSDIRECTORY 不为空，则删除该目录及其所有内容
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # 删除指定的目录及其所有内容，忽略所有错误信息
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 关闭所有交换空间
          sudo swapoff -a
          # 删除指定的交换文件
          sudo rm -f /swapfile /mnt/swapfile
          # 更新 Ubuntu 的软件包列表
          sudo -E apt-get -y update
          # 删除指定的软件包及其配置文件。如果删除失败，则忽略错误
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          # 下载并安装指定 URL 中列出的软件包
          # sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          # sudo apt-get install -y build-essential libncursesw5-dev libreadline6-dev libssl-dev libgdbm-dev libc6-dev libsqlite3-dev tk-dev libbz2-dev
          sudo -E apt-get -y install \
          ack \
          antlr3 \
          asciidoc \
          autoconf \
          automake \
          autopoint \
          binutils \
          bison \
          build-essential \
          bzip2 \
          ccache \
          clang \
          clangd \
          cmake \
          cpio \
          curl \
          device-tree-compiler \
          ecj \
          fastjar \
          flex \
          gawk \
          gettext \
          gcc-multilib \
          g++-multilib \
          git \
          gperf \
          haveged \
          help2man \
          intltool \
          lib32gcc-s1 \
          libc6-dev-i386 \
          libelf-dev \
          libglib2.0-dev \
          libgmp3-dev \
          libltdl-dev \
          libmpc-dev \
          libmpfr-dev \
          libncurses5-dev \
          libncursesw5 \
          libncursesw5-dev \
          libreadline-dev \
          libssl-dev \
          libtool \
          lld \
          lldb \
          lrzsz \
          mkisofs \
          msmtp \
          nano \
          ninja-build \
          p7zip \
          p7zip-full \
          patch \
          pkgconf \
          python3 \
          python3-distutils \
          python3-docutils \
          python3-pip \
          python3-ply \
          qemu-utils \
          re2c \
          rsync \
          scons \
          squashfs-tools \
          subversion \
          swig \
          texinfo \
          uglifyjs \
          unzip \
          vim \
          wget \
          xmlto \
          xxd \
          zlib1g-dev 
          # 重新加载 systemd 的配置
          sudo -E systemctl daemon-reload
          # 删除所有不再需要的软件包及其配置文件
          sudo -E apt-get -y autoremove --purge
          # 清理 apt 的缓存
          sudo -E apt-get clean
          # 从 root 用户的 .bashrc 和 .profile 文件中删除包含 NVM_DIR 和 skel 的行
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          # 删除指定的目录及其所有内容
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          # 设置系统的时区为环境变量 TZ 指定的值
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        working-directory: /
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          # sudo dd if=/dev/zero of=/tmp/disk.img bs=1M count=1024
          # sudo mkfs.ext2 /tmp/disk.img
          # sudo mkdir /mnt/disk
          # sudo mount -o loop /tmp/disk.img /mnt/disk
          # 计算 /mnt 分区的可用空间（减去 1GB 作为缓冲）
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          # 计算根分区的可用空间（减去 4GB 作为缓冲）
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          # 创建一个大小为 mnt_size 的文件 /mnt/mnt.img
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          # 创建一个大小为 root_size 的文件 /root.img
          sudo truncate -s "${root_size}"G /root.img
          # 将这两个文件关联到 loop 设备
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          # 在这两个 loop 设备上创建物理卷
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          # 创建一个名为 github 的卷组，包含这两个物理卷
          sudo vgcreate github /dev/loop6 /dev/loop7
          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间
          sudo lvcreate -n runner -l 100%FREE github
          # 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo mkfs.xfs /dev/github/runner
          # 创建一个挂载点 ${PATH_BUILD}
          sudo mkdir -p ${PATH_BUILD}
          # 将 runner 逻辑卷挂载到 ${PATH_BUILD}
          sudo mount /dev/github/runner ${PATH_BUILD}
          # 将 ${PATH_BUILD} 的所有者和组更改为 runner
          sudo chown -R runner.runner ${PATH_BUILD}
          # 显示所有文件系统的磁盘空间使用情况
          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone source code
        id: codes
        working-directory: ${{ env.PATH_BUILD }}
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          # Clone source code 克隆 ${REPO_URL} 仓库到 PATH_REPO 绝对路径
          # --quiet 静默模式不输出任何信息 --single-branch 只克隆指定的分支 --depth=1 只克隆最近的一次提交 --branch=${REPO_BRANCH} 要克隆的分支
          git clone --quiet --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} ${PATH_REPO}

          # 符号链接，通过目标 ${GITHUB_WORKSPACE}/${DIR_REPO} 访问到源完整路径 ${PATH_REPO}
          # ln -sf ${PATH_REPO} ${GITHUB_WORKSPACE}/${DIR_REPO}

          # 打印仓库 URL、分支和标签名称
          # echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${TAGS_NAME} ]"

          # 显示当前工作目录的磁盘空间使用情况
          df -hT ${PWD}

          # 将仓库 URL 写入到 GITHUB_OUTPUT 环境变量指定的文件中
          # echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
          # echo "TAGS_NAME=${TAGS_NAME}" >> ${GITHUB_OUTPUT}
          # Set output information 将构建标签和日期信息写入到 GITHUB_OUTPUT 环境变量指定的文件中
          # echo "build_tag=OpenWrt_${TAGS_NAME}_${{ inputs.openwrt_storage }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo "build_tag=Immortalwrt_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load custom feeds to feeds.conf.default
        working-directory: ${{ env.PATH_REPO }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${FEEDS_CONF}" && ! "${FEEDS_CONF}" -ef "${PATH_REPO}/feeds.conf.default" ]]; then
            echo -e "FEEDS_CONF: ${FEEDS_CONF}"
            cp -f ${FEEDS_CONF} ${PATH_REPO}/feeds.conf.default
          fi

      - name: Execute DIY script (before update feeds)
        working-directory: ${{ env.PATH_REPO }}
        env:
          SCRIPT_FILE: ${{ env.DIY_P1_SH }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${SCRIPT_FILE}" ]]; then
            echo -e "SCRIPT_FILE: ${SCRIPT_FILE}"
            chmod +x ${SCRIPT_FILE}
            bash ${SCRIPT_FILE}
          fi

      - name: Update feeds
        id: update
        working-directory: ${{ env.PATH_REPO }}
        run: |
          echo -e "Current working directory: $(pwd)"
          ./scripts/feeds update -a
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Install feeds
        id: install
        working-directory: ${{ env.PATH_REPO }}
        if: ${{ steps.update.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          ./scripts/feeds install -a
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load custom configuration to .config
        id: config
        working-directory: ${{ env.PATH_REPO }}
        run: |
          echo -e "Current working directory: $(pwd)"

          if [[ ! -e "${PATH_REPO}/.config" ]]; then
            echo ".config file not found, generating default config..."
            make defconfig
          fi

          if [[ -e "${CONFIG_FILE}" && ! "${CONFIG_FILE}" -ef "${PATH_REPO}/.config" ]]; then
            echo -e "CONFIG_FILE: ${CONFIG_FILE}"
            cp -f ${CONFIG_FILE} ${PATH_REPO}/.config
            echo "status=diy" >> ${GITHUB_OUTPUT}
          fi

          # "files" 目录通常包含一些要添加到固件中的文件, 检查如果存在"files" 目录，则将目录移动到 openwrt/files
          # [[ -e "files" ]] && mv -f files openwrt/files

      - name: Execute DIY script (after install feeds, before download package)
        working-directory: ${{ env.PATH_REPO }}
        env:
          SCRIPT_FILE: ${{ env.DIY_P2_SH }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${SCRIPT_FILE}" ]]; then
            echo -e "SCRIPT_FILE: ${SCRIPT_FILE}"
            chmod +x ${SCRIPT_FILE}
            bash ${SCRIPT_FILE}
          fi

      - name: Download package
        id: package
        working-directory: ${{ env.PATH_REPO }}
        env:
          status_config: ${{ steps.config.outputs.status }}
        if: ${{ steps.install.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "make download: $(nproc + 1) thread"
          export FORCE_UNSAFE_CONFIGURE=1
          # make defconfig
          make download -j$(nproc + 1)
          echo -e "make download: completed"
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          cat ./.config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile the OpenWrt
        id: compile
        working-directory: ${{ env.PATH_REPO }}
        if: ${{ steps.package.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "$(nproc) thread compile"
          export FORCE_UNSAFE_CONFIGURE=1
          make -j$(($(nproc) + 1)) V=s || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      # - name: Compile the OpenWrt (Multi Threaded)
      #   id: compile_multi
      #   working-directory: ${{ env.PATH_REPO }}
      #   if: ${{ steps.package.outputs.status }} == 'success' && !cancelled()
      #   run: |
      #     echo -e "Current working directory: $(pwd)"
      #     echo -e "$(nproc) thread compile"
      #     export FORCE_UNSAFE_CONFIGURE=1
      #     cat ./.config
      #     (make -j$(($(nproc) + 1)) V=s || make -j1 V=s) && echo "status=success" >> ${GITHUB_OUTPUT}

      # - name: Compile the OpenWrt (Single Threaded)
      #   id: compile_single
      #   working-directory: ${{ env.PATH_REPO }}
      #   if: ${{ steps.compile_multi.outputs.status }} != 'success' && !cancelled()
      #   run: |
      #     echo -e "Current working directory: $(pwd)"
      #     echo -e "Single thread compile"
      #     export FORCE_UNSAFE_CONFIGURE=1
      #     cat ./.config
      #     make -j1 V=s && echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Copy to output
        id: copy
        working-directory: /
        env:
          PATH_TARGET: ${{ env.PATH_REPO }}/bin/targets/*/*/*
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        # if: ( ${{ steps.compile_multi.outputs.status }} == 'success' || ${{ steps.compile_single.outputs.status }} == 'success') && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          [[ -e "${PATH_OUTPUT}" ]] || mkdir -p ${PATH_OUTPUT}
          cp -rf ${PATH_TARGET} ${PATH_OUTPUT}/
          cp -f ${PATH_REPO}/.config ${PATH_OUTPUT}/config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup output
        id: output
        working-directory: ${{ env.PATH_OUTPUT }}
        if: ${{ steps.copy.outputs.status }} == 'success' && !cancelled()
        run: |
          rm -rf packages
          for file in *.bin
          do
            if [[ ! -d "${file}" ]]
            then
              sha256sum "${file}" >"${file}.sha"
            fi
          done
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: ${{ env.PATH_OUTPUT }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            # 未经测试

      - name: Clear workspace
        id: clean
        working-directory: ${{ env.PATH_REPO }}
        run: |
          # rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
          rm -rf ./* 2>/dev/null
          # 显示当前工作目录的磁盘空间使用情况
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
